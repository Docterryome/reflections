What happens when you initialize a repository? Why do you need to do it?
----------------------------------------------------------
When you initilize a repository what happens it creates the .git folder. You need to initilize to make your project into a git project.



How is the staging area different from the working directory and the repository? What value do you think it offers?
-------------------------------------------------------------------------------------------------------------------------------------------
It allows you to add files you are ready to commit, and leave out the one you are not. It allows you to work on multiple things at a time. For example you might have one thing to work on that aquires a lot of work, but also have another thing that you are working on that does not aquire as much work you may just one to commit the second thing first as you countiue to work on the first thing.



How can you use the staging area to make sure you have one commit per logical change?
-------------------------------------------------------------------------------------
By making sure each file you want to commit from the working area to the staging area fit the logic change that you want to make



What are some situations when branches would be helpful in keeping your history organized? How would branches help?
----------------------------------------------------------------------------------------------------------------------
Branching helps by organizing your project into different section to been worked on for example each new realeases of a project may have a branch to respesent that realese.



How do the diagrams help you visualize the branch structure?
-------------------------------------------------------------------------
It let's you know where you brached off from the master, and let you know what commits are assosiated with your branch. Diagrams help visualize the branch sturcture by showing you the branch structure.



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
----------------------------------------------------------------------------------------------------------------------
When you merge two branches together all the commits and chages that where made will be put together as if they were all apart of one branch. It's represented in the diagram the way it is to help visualize where branch was vered off and put back together.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
------------------------------------------------------------------------------------------------
The pro of automcatic merging is that when two seprate changes have been made it will merge those changes together without the user having to do anything which saves a lot of time. The con side of it however the two commits may be seperate changes, but it may contradict with each other.